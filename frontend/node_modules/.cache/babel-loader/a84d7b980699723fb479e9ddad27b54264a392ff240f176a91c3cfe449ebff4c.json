{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rui Seca\\\\savannah-bites\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst CART_STORAGE_KEY = \"savannah_bites_cart\";\nconst DEALS_STORAGE_KEY = \"savannah_bites_deals\";\nconst CART_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds\n\nexport function CartProvider({\n  children\n}) {\n  _s();\n  const [cart, setCart] = useState(() => {\n    try {\n      const savedCart = localStorage.getItem(CART_STORAGE_KEY);\n      return savedCart ? JSON.parse(savedCart) : [];\n    } catch (error) {\n      console.error(\"Error loading cart from storage:\", error);\n      return [];\n    }\n  });\n  const [activeDeal, setActiveDeal] = useState(() => {\n    try {\n      const savedDeal = localStorage.getItem(DEALS_STORAGE_KEY);\n      return savedDeal ? JSON.parse(savedDeal) : null;\n    } catch (error) {\n      console.error(\"Error loading deal from storage:\", error);\n      return null;\n    }\n  });\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\n  const getItemPrice = useCallback(item => {\n    if (typeof item.price === \"object\") {\n      return item.selectedPrice || item.price[item.size] || Object.values(item.price)[0];\n    }\n    return item.price;\n  }, []);\n\n  // Save cart and deals to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));\n      localStorage.setItem(DEALS_STORAGE_KEY, JSON.stringify(activeDeal));\n      setLastUpdated(Date.now());\n    } catch (error) {\n      console.error(\"Error saving cart/deals to storage:\", error);\n    }\n  }, [cart, activeDeal]);\n  const clearCart = useCallback(() => {\n    setCart([]);\n    setActiveDeal(null);\n    localStorage.removeItem(CART_STORAGE_KEY);\n    localStorage.removeItem(DEALS_STORAGE_KEY);\n  }, []);\n  const getItemKey = useCallback((id, size) => `${id}-${size || \"default\"}`, []);\n  const startDeal = useCallback(deal => {\n    setActiveDeal({\n      ...deal,\n      startedAt: new Date().toISOString(),\n      itemsFulfilled: {}\n    });\n  }, []);\n  const cancelDeal = useCallback(() => {\n    setActiveDeal(null);\n  }, []);\n  const checkDealRequirements = useCallback((deal, cartItems) => {\n    const itemsByCategory = cartItems.reduce((acc, item) => {\n      if (!acc[item.category]) {\n        acc[item.category] = [];\n      }\n      acc[item.category].push(item);\n      return acc;\n    }, {});\n    return Object.entries(deal.requirements).every(([category, requirement]) => {\n      const categoryItems = itemsByCategory[category] || [];\n      const validItems = categoryItems.filter(item => requirement.size === \"any\" || item.size === requirement.size);\n      const totalCount = validItems.reduce((sum, item) => sum + item.quantity, 0);\n      return totalCount >= requirement.count;\n    });\n  }, []);\n  const addToCart = useCallback(item => {\n    setCart(currentCart => {\n      const itemKey = getItemKey(item.id, item.size);\n      const existingItemIndex = currentCart.findIndex(cartItem => getItemKey(cartItem.id, cartItem.size) === itemKey);\n      let updatedCart;\n      if (existingItemIndex !== -1) {\n        updatedCart = currentCart.map((cartItem, index) => index === existingItemIndex ? {\n          ...cartItem,\n          quantity: cartItem.quantity + 1\n        } : cartItem);\n      } else {\n        updatedCart = [...currentCart, {\n          ...item,\n          quantity: 1,\n          cartItemId: itemKey,\n          addedAt: new Date().toISOString()\n        }];\n      }\n      if (activeDeal) {\n        const isDealComplete = checkDealRequirements(activeDeal, updatedCart);\n        if (isDealComplete) {\n          updatedCart = updatedCart.map(item => ({\n            ...item,\n            inDeal: true\n          }));\n        }\n      }\n      return updatedCart;\n    });\n  }, [getItemKey, activeDeal, checkDealRequirements]);\n  const removeFromCart = useCallback((itemId, size = null) => {\n    setCart(currentCart => {\n      const itemKey = getItemKey(itemId, size);\n      const updatedCart = currentCart.filter(item => getItemKey(item.id, item.size) !== itemKey);\n      if (activeDeal && !checkDealRequirements(activeDeal, updatedCart)) {\n        return updatedCart.map(item => ({\n          ...item,\n          inDeal: false\n        }));\n      }\n      return updatedCart;\n    });\n  }, [getItemKey, activeDeal, checkDealRequirements]);\n  const updateQuantity = useCallback((itemId, newQuantity, size = null) => {\n    if (newQuantity < 1) {\n      removeFromCart(itemId, size);\n      return;\n    }\n    setCart(currentCart => {\n      const itemKey = getItemKey(itemId, size);\n      const updatedCart = currentCart.map(item => getItemKey(item.id, item.size) === itemKey ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n      if (activeDeal) {\n        const isDealValid = checkDealRequirements(activeDeal, updatedCart);\n        return updatedCart.map(item => ({\n          ...item,\n          inDeal: isDealValid\n        }));\n      }\n      return updatedCart;\n    });\n  }, [removeFromCart, getItemKey, activeDeal, checkDealRequirements]);\n  const cartTotal = useCallback(() => {\n    if (!activeDeal) {\n      return cart.reduce((total, item) => {\n        const price = getItemPrice(item);\n        return total + price * item.quantity;\n      }, 0);\n    }\n    if (checkDealRequirements(activeDeal, cart)) {\n      return activeDeal.price;\n    }\n    return cart.reduce((total, item) => {\n      const price = getItemPrice(item);\n      return total + price * item.quantity;\n    }, 0);\n  }, [cart, activeDeal, checkDealRequirements, getItemPrice]);\n  const cartItemsCount = useCallback(() => {\n    return cart.reduce((total, item) => total + item.quantity, 0);\n  }, [cart]);\n  const isItemInCart = useCallback((itemId, size = null) => {\n    const itemKey = getItemKey(itemId, size);\n    return cart.some(item => getItemKey(item.id, item.size) === itemKey);\n  }, [cart, getItemKey]);\n  const updateItemNote = useCallback((itemId, note, size = null) => {\n    setCart(currentCart => {\n      const itemKey = getItemKey(itemId, size);\n      return currentCart.map(item => getItemKey(item.id, item.size) === itemKey ? {\n        ...item,\n        note\n      } : item);\n    });\n  }, [getItemKey]);\n  const value = {\n    cart,\n    activeDeal,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    cartTotal,\n    cartItemsCount,\n    isItemInCart,\n    updateItemNote,\n    startDeal,\n    cancelDeal,\n    checkDealRequirements,\n    getItemPrice\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 10\n  }, this);\n}\n_s(CartProvider, \"xrI571Syuh4PH1VE5WF5D5vdAfQ=\");\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","CartContext","CART_STORAGE_KEY","DEALS_STORAGE_KEY","CART_TIMEOUT","CartProvider","children","_s","cart","setCart","savedCart","localStorage","getItem","JSON","parse","error","console","activeDeal","setActiveDeal","savedDeal","lastUpdated","setLastUpdated","Date","now","getItemPrice","item","price","selectedPrice","size","Object","values","setItem","stringify","clearCart","removeItem","getItemKey","id","startDeal","deal","startedAt","toISOString","itemsFulfilled","cancelDeal","checkDealRequirements","cartItems","itemsByCategory","reduce","acc","category","push","entries","requirements","every","requirement","categoryItems","validItems","filter","totalCount","sum","quantity","count","addToCart","currentCart","itemKey","existingItemIndex","findIndex","cartItem","updatedCart","map","index","cartItemId","addedAt","isDealComplete","inDeal","removeFromCart","itemId","updateQuantity","newQuantity","isDealValid","cartTotal","total","cartItemsCount","isItemInCart","some","updateItemNote","note","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/Rui Seca/savannah-bites/frontend/src/context/CartContext.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst CartContext = createContext();\r\n\r\nconst CART_STORAGE_KEY = \"savannah_bites_cart\";\r\nconst DEALS_STORAGE_KEY = \"savannah_bites_deals\";\r\nconst CART_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds\r\n\r\nexport function CartProvider({ children }) {\r\n  const [cart, setCart] = useState(() => {\r\n    try {\r\n      const savedCart = localStorage.getItem(CART_STORAGE_KEY);\r\n      return savedCart ? JSON.parse(savedCart) : [];\r\n    } catch (error) {\r\n      console.error(\"Error loading cart from storage:\", error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  const [activeDeal, setActiveDeal] = useState(() => {\r\n    try {\r\n      const savedDeal = localStorage.getItem(DEALS_STORAGE_KEY);\r\n      return savedDeal ? JSON.parse(savedDeal) : null;\r\n    } catch (error) {\r\n      console.error(\"Error loading deal from storage:\", error);\r\n      return null;\r\n    }\r\n  });\r\n\r\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\r\n\r\n  const getItemPrice = useCallback((item) => {\r\n    if (typeof item.price === \"object\") {\r\n      return (\r\n        item.selectedPrice ||\r\n        item.price[item.size] ||\r\n        Object.values(item.price)[0]\r\n      );\r\n    }\r\n    return item.price;\r\n  }, []);\r\n\r\n  // Save cart and deals to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));\r\n      localStorage.setItem(DEALS_STORAGE_KEY, JSON.stringify(activeDeal));\r\n      setLastUpdated(Date.now());\r\n    } catch (error) {\r\n      console.error(\"Error saving cart/deals to storage:\", error);\r\n    }\r\n  }, [cart, activeDeal]);\r\n\r\n  const clearCart = useCallback(() => {\r\n    setCart([]);\r\n    setActiveDeal(null);\r\n    localStorage.removeItem(CART_STORAGE_KEY);\r\n    localStorage.removeItem(DEALS_STORAGE_KEY);\r\n  }, []);\r\n\r\n  const getItemKey = useCallback(\r\n    (id, size) => `${id}-${size || \"default\"}`,\r\n    []\r\n  );\r\n\r\n  const startDeal = useCallback((deal) => {\r\n    setActiveDeal({\r\n      ...deal,\r\n      startedAt: new Date().toISOString(),\r\n      itemsFulfilled: {},\r\n    });\r\n  }, []);\r\n\r\n  const cancelDeal = useCallback(() => {\r\n    setActiveDeal(null);\r\n  }, []);\r\n\r\n  const checkDealRequirements = useCallback((deal, cartItems) => {\r\n    const itemsByCategory = cartItems.reduce((acc, item) => {\r\n      if (!acc[item.category]) {\r\n        acc[item.category] = [];\r\n      }\r\n      acc[item.category].push(item);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(deal.requirements).every(\r\n      ([category, requirement]) => {\r\n        const categoryItems = itemsByCategory[category] || [];\r\n        const validItems = categoryItems.filter(\r\n          (item) => requirement.size === \"any\" || item.size === requirement.size\r\n        );\r\n        const totalCount = validItems.reduce(\r\n          (sum, item) => sum + item.quantity,\r\n          0\r\n        );\r\n        return totalCount >= requirement.count;\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const addToCart = useCallback(\r\n    (item) => {\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(item.id, item.size);\r\n        const existingItemIndex = currentCart.findIndex(\r\n          (cartItem) => getItemKey(cartItem.id, cartItem.size) === itemKey\r\n        );\r\n\r\n        let updatedCart;\r\n        if (existingItemIndex !== -1) {\r\n          updatedCart = currentCart.map((cartItem, index) =>\r\n            index === existingItemIndex\r\n              ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n              : cartItem\r\n          );\r\n        } else {\r\n          updatedCart = [\r\n            ...currentCart,\r\n            {\r\n              ...item,\r\n              quantity: 1,\r\n              cartItemId: itemKey,\r\n              addedAt: new Date().toISOString(),\r\n            },\r\n          ];\r\n        }\r\n\r\n        if (activeDeal) {\r\n          const isDealComplete = checkDealRequirements(activeDeal, updatedCart);\r\n          if (isDealComplete) {\r\n            updatedCart = updatedCart.map((item) => ({\r\n              ...item,\r\n              inDeal: true,\r\n            }));\r\n          }\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  const removeFromCart = useCallback(\r\n    (itemId, size = null) => {\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(itemId, size);\r\n        const updatedCart = currentCart.filter(\r\n          (item) => getItemKey(item.id, item.size) !== itemKey\r\n        );\r\n\r\n        if (activeDeal && !checkDealRequirements(activeDeal, updatedCart)) {\r\n          return updatedCart.map((item) => ({\r\n            ...item,\r\n            inDeal: false,\r\n          }));\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  const updateQuantity = useCallback(\r\n    (itemId, newQuantity, size = null) => {\r\n      if (newQuantity < 1) {\r\n        removeFromCart(itemId, size);\r\n        return;\r\n      }\r\n\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(itemId, size);\r\n        const updatedCart = currentCart.map((item) =>\r\n          getItemKey(item.id, item.size) === itemKey\r\n            ? { ...item, quantity: newQuantity }\r\n            : item\r\n        );\r\n\r\n        if (activeDeal) {\r\n          const isDealValid = checkDealRequirements(activeDeal, updatedCart);\r\n          return updatedCart.map((item) => ({\r\n            ...item,\r\n            inDeal: isDealValid,\r\n          }));\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [removeFromCart, getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  const cartTotal = useCallback(() => {\r\n    if (!activeDeal) {\r\n      return cart.reduce((total, item) => {\r\n        const price = getItemPrice(item);\r\n        return total + price * item.quantity;\r\n      }, 0);\r\n    }\r\n\r\n    if (checkDealRequirements(activeDeal, cart)) {\r\n      return activeDeal.price;\r\n    }\r\n\r\n    return cart.reduce((total, item) => {\r\n      const price = getItemPrice(item);\r\n      return total + price * item.quantity;\r\n    }, 0);\r\n  }, [cart, activeDeal, checkDealRequirements, getItemPrice]);\r\n\r\n  const cartItemsCount = useCallback(() => {\r\n    return cart.reduce((total, item) => total + item.quantity, 0);\r\n  }, [cart]);\r\n\r\n  const isItemInCart = useCallback(\r\n    (itemId, size = null) => {\r\n      const itemKey = getItemKey(itemId, size);\r\n      return cart.some((item) => getItemKey(item.id, item.size) === itemKey);\r\n    },\r\n    [cart, getItemKey]\r\n  );\r\n\r\n  const updateItemNote = useCallback(\r\n    (itemId, note, size = null) => {\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(itemId, size);\r\n        return currentCart.map((item) =>\r\n          getItemKey(item.id, item.size) === itemKey ? { ...item, note } : item\r\n        );\r\n      });\r\n    },\r\n    [getItemKey]\r\n  );\r\n\r\n  const value = {\r\n    cart,\r\n    activeDeal,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    cartTotal,\r\n    cartItemsCount,\r\n    isItemInCart,\r\n    updateItemNote,\r\n    startDeal,\r\n    cancelDeal,\r\n    checkDealRequirements,\r\n    getItemPrice,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n}\r\n\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useCart must be used within a CartProvider\");\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}