{"ast":null,"code":"// src/config/api.js\nimport axios from \"axios\";\n\n// Custom Error Class\nclass APIError extends Error {\n  constructor(message, status, data) {\n    super(message);\n    this.name = \"APIError\";\n    this.status = status;\n    this.data = data;\n    this.timestamp = new Date().toISOString();\n  }\n}\n\n// Environment and Configuration\nconst API_CONFIG = {\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  timeout: 15000,\n  retryAttempts: 3,\n  retryDelay: 1000,\n  environment: process.env.NODE_ENV\n};\n\n// Validation Functions\nconst validateAmount = amount => {\n  if (!amount || typeof amount !== \"number\" || isNaN(amount) || amount <= 0) {\n    throw new Error(\"Invalid amount provided: amount must be a positive number\");\n  }\n  if (!Number.isInteger(amount)) {\n    throw new Error(\"Amount must be in cents (integer)\");\n  }\n  return true;\n};\nconst validateOrderData = orderData => {\n  var _orderData$deliveryTi;\n  if (!orderData) throw new Error(\"Order data is required\");\n  const errors = [];\n\n  // Validate payment intent ID\n  if (!orderData.paymentIntentId) {\n    errors.push(\"Payment intent ID is required\");\n  }\n\n  // Validate order items\n  if (!Array.isArray(orderData.orderDetails)) {\n    errors.push(\"Order details must be an array\");\n  } else if (orderData.orderDetails.length === 0) {\n    errors.push(\"Order must contain at least one item\");\n  } else {\n    orderData.orderDetails.forEach((item, index) => {\n      if (!item.name) errors.push(`Item ${index + 1} is missing a name`);\n      if (!item.quantity || item.quantity <= 0) errors.push(`Item ${index + 1} has invalid quantity`);\n      if (!item.price) errors.push(`Item ${index + 1} is missing a price`);\n    });\n  }\n\n  // Validate customer\n  if (!orderData.customer) {\n    errors.push(\"Customer information is required\");\n  } else {\n    const {\n      name,\n      email,\n      phone\n    } = orderData.customer;\n    if (!name) errors.push(\"Customer name is required\");\n    if (!email) errors.push(\"Customer email is required\");\n    if (!phone) errors.push(\"Customer phone is required\");\n  }\n\n  // Validate address\n  if (!orderData.address) {\n    errors.push(\"Address is required\");\n  } else {\n    const {\n      street,\n      city,\n      postcode\n    } = orderData.address;\n    if (!street) errors.push(\"Street address is required\");\n    if (!city) errors.push(\"City is required\");\n    if (!postcode) errors.push(\"Postcode is required\");\n  }\n\n  // Validate amount\n  if (!orderData.amount) {\n    errors.push(\"Amount information is required\");\n  } else {\n    const {\n      subtotal,\n      total,\n      deliveryFee\n    } = orderData.amount;\n    if (typeof subtotal !== \"number\") errors.push(\"Subtotal must be a number\");\n    if (typeof total !== \"number\") errors.push(\"Total must be a number\");\n    if (typeof deliveryFee !== \"number\") errors.push(\"Delivery fee must be a number\");\n  }\n\n  // Validate delivery time\n  if (!((_orderData$deliveryTi = orderData.deliveryTime) !== null && _orderData$deliveryTi !== void 0 && _orderData$deliveryTi.requested)) {\n    errors.push(\"Delivery time is required\");\n  }\n  if (errors.length > 0) {\n    throw new Error(errors.join(\", \"));\n  }\n  return true;\n};\n\n// Axios Instance Configuration\nconst api = axios.create({\n  baseURL: API_CONFIG.baseURL,\n  timeout: API_CONFIG.timeout,\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request Interceptor\napi.interceptors.request.use(config => {\n  if (API_CONFIG.environment === \"development\") {\n    var _config$method;\n    console.log(\"API Request:\", {\n      method: (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(),\n      url: config.url,\n      data: config.data\n    });\n  }\n  return config;\n}, error => {\n  console.error(\"Request Interceptor Error:\", error);\n  return Promise.reject(error);\n});\n\n// Response Interceptor\napi.interceptors.response.use(response => {\n  if (API_CONFIG.environment === \"development\") {\n    console.log(\"API Response:\", {\n      status: response.status,\n      data: response.data\n    });\n  }\n  return response;\n}, async error => {\n  var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n  const originalRequest = error.config;\n\n  // Retry logic for failed requests\n  if (!originalRequest._retry && originalRequest.retryAttempt < API_CONFIG.retryAttempts) {\n    originalRequest._retry = true;\n    originalRequest.retryAttempt = (originalRequest.retryAttempt || 0) + 1;\n    await new Promise(resolve => setTimeout(resolve, API_CONFIG.retryDelay));\n    return api(originalRequest);\n  }\n  console.error(\"API Error:\", {\n    message: error.message,\n    response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n    status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n    url: originalRequest === null || originalRequest === void 0 ? void 0 : originalRequest.url\n  });\n  return Promise.reject(new APIError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message, ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 500, (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data));\n});\n\n// Payment API\nexport const paymentAPI = {\n  createPaymentIntent: async data => {\n    try {\n      var _response$data;\n      validateAmount(data.amount);\n      const response = await api.post(\"/api/orders/create-payment-intent\", {\n        amount: data.amount,\n        currency: data.currency || \"gbp\",\n        metadata: {\n          ...data.metadata,\n          timestamp: new Date().toISOString()\n        }\n      });\n      if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.clientSecret)) {\n        throw new Error(\"No client secret received from payment intent creation\");\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response7;\n      console.error(\"Payment Intent Creation Error:\", error);\n      throw error instanceof APIError ? error : new APIError(error.message, ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) || 500, (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data);\n    }\n  },\n  createOrder: async orderData => {\n    try {\n      var _response$data2;\n      validateOrderData(orderData);\n      console.log(\"Sending order data to API:\", JSON.stringify(orderData, null, 2));\n      const response = await api.post(\"/api/orders\", orderData);\n      console.log(\"API Response:\", response.data);\n      if (!((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.orderId)) {\n        throw new Error(\"Order creation failed: No order ID received\");\n      }\n      return {\n        orderId: response.data.orderId,\n        status: response.data.status\n      };\n    } catch (error) {\n      var _error$response8, _error$response8$data, _error$response9, _error$response10;\n      if ((_error$response8 = error.response) !== null && _error$response8 !== void 0 && (_error$response8$data = _error$response8.data) !== null && _error$response8$data !== void 0 && _error$response8$data.details) {\n        console.error(\"Validation errors:\", error.response.data.details);\n        throw new APIError(\"Order validation failed: \" + error.response.data.details.join(\", \"), error.response.status, error.response.data);\n      }\n      throw error instanceof APIError ? error : new APIError(error.message, ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) || 500, (_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data);\n    }\n  },\n  getOrder: async orderId => {\n    try {\n      if (!orderId) throw new Error(\"Order ID is required\");\n      const response = await api.get(`/api/orders/${orderId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response11, _error$response12;\n      console.error(\"Get Order Error:\", error);\n      throw error instanceof APIError ? error : new APIError(error.message, ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.status) || 500, (_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data);\n    }\n  },\n  updateOrderStatus: async (orderId, status) => {\n    try {\n      if (!orderId) throw new Error(\"Order ID is required\");\n      if (!status) throw new Error(\"Status is required\");\n      const response = await api.patch(`/api/orders/${orderId}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response13, _error$response14;\n      console.error(\"Order Status Update Error:\", error);\n      throw error instanceof APIError ? error : new APIError(error.message, ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.status) || 500, (_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data);\n    }\n  },\n  cancelOrder: async (orderId, reason) => {\n    try {\n      if (!orderId) throw new Error(\"Order ID is required\");\n      const response = await api.post(`/api/orders/${orderId}/cancel`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response15, _error$response16;\n      console.error(\"Order Cancellation Error:\", error);\n      throw error instanceof APIError ? error : new APIError(error.message, ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.status) || 500, (_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data);\n    }\n  }\n};\n\n// Health Check\nexport const checkAPIHealth = async () => {\n  try {\n    const startTime = Date.now();\n    const response = await api.get(\"/api/health\");\n    const endTime = Date.now();\n    return {\n      isHealthy: true,\n      responseTime: endTime - startTime,\n      status: response.data.status,\n      timestamp: new Date().toISOString(),\n      environment: API_CONFIG.environment\n    };\n  } catch (error) {\n    return {\n      isHealthy: false,\n      error: error.message,\n      timestamp: new Date().toISOString(),\n      environment: API_CONFIG.environment\n    };\n  }\n};\nexport const retryRequest = async (fn, retries = API_CONFIG.retryAttempts, delay = API_CONFIG.retryDelay) => {\n  try {\n    return await fn();\n  } catch (error) {\n    if (retries === 0) throw error;\n    await new Promise(resolve => setTimeout(resolve, delay));\n    return retryRequest(fn, retries - 1, delay * 2);\n  }\n};\nexport const getAPIConfig = () => ({\n  ...API_CONFIG,\n  currentTime: new Date().toISOString()\n});\nconst apiService = {\n  api,\n  paymentAPI,\n  checkAPIHealth,\n  retryRequest,\n  getAPIConfig\n};\nexport default apiService;","map":{"version":3,"names":["axios","APIError","Error","constructor","message","status","data","name","timestamp","Date","toISOString","API_CONFIG","baseURL","process","env","REACT_APP_API_BASE_URL","timeout","retryAttempts","retryDelay","environment","NODE_ENV","validateAmount","amount","isNaN","Number","isInteger","validateOrderData","orderData","_orderData$deliveryTi","errors","paymentIntentId","push","Array","isArray","orderDetails","length","forEach","item","index","quantity","price","customer","email","phone","address","street","city","postcode","subtotal","total","deliveryFee","deliveryTime","requested","join","api","create","withCredentials","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","originalRequest","_retry","retryAttempt","resolve","setTimeout","paymentAPI","createPaymentIntent","_response$data","post","currency","metadata","clientSecret","_error$response6","_error$response7","createOrder","_response$data2","JSON","stringify","orderId","_error$response8","_error$response8$data","_error$response9","_error$response10","details","getOrder","get","_error$response11","_error$response12","updateOrderStatus","patch","_error$response13","_error$response14","cancelOrder","reason","_error$response15","_error$response16","checkAPIHealth","startTime","now","endTime","isHealthy","responseTime","retryRequest","fn","retries","delay","getAPIConfig","currentTime","apiService"],"sources":["C:/Users/Rui Seca/savannah-bites/frontend/src/config/api.js"],"sourcesContent":["// src/config/api.js\r\nimport axios from \"axios\";\r\n\r\n// Custom Error Class\r\nclass APIError extends Error {\r\n  constructor(message, status, data) {\r\n    super(message);\r\n    this.name = \"APIError\";\r\n    this.status = status;\r\n    this.data = data;\r\n    this.timestamp = new Date().toISOString();\r\n  }\r\n}\r\n\r\n// Environment and Configuration\r\nconst API_CONFIG = {\r\n  baseURL: process.env.REACT_APP_API_BASE_URL,\r\n  timeout: 15000,\r\n  retryAttempts: 3,\r\n  retryDelay: 1000,\r\n  environment: process.env.NODE_ENV,\r\n};\r\n\r\n// Validation Functions\r\nconst validateAmount = (amount) => {\r\n  if (!amount || typeof amount !== \"number\" || isNaN(amount) || amount <= 0) {\r\n    throw new Error(\r\n      \"Invalid amount provided: amount must be a positive number\"\r\n    );\r\n  }\r\n  if (!Number.isInteger(amount)) {\r\n    throw new Error(\"Amount must be in cents (integer)\");\r\n  }\r\n  return true;\r\n};\r\n\r\nconst validateOrderData = (orderData) => {\r\n  if (!orderData) throw new Error(\"Order data is required\");\r\n\r\n  const errors = [];\r\n\r\n  // Validate payment intent ID\r\n  if (!orderData.paymentIntentId) {\r\n    errors.push(\"Payment intent ID is required\");\r\n  }\r\n\r\n  // Validate order items\r\n  if (!Array.isArray(orderData.orderDetails)) {\r\n    errors.push(\"Order details must be an array\");\r\n  } else if (orderData.orderDetails.length === 0) {\r\n    errors.push(\"Order must contain at least one item\");\r\n  } else {\r\n    orderData.orderDetails.forEach((item, index) => {\r\n      if (!item.name) errors.push(`Item ${index + 1} is missing a name`);\r\n      if (!item.quantity || item.quantity <= 0)\r\n        errors.push(`Item ${index + 1} has invalid quantity`);\r\n      if (!item.price) errors.push(`Item ${index + 1} is missing a price`);\r\n    });\r\n  }\r\n\r\n  // Validate customer\r\n  if (!orderData.customer) {\r\n    errors.push(\"Customer information is required\");\r\n  } else {\r\n    const { name, email, phone } = orderData.customer;\r\n    if (!name) errors.push(\"Customer name is required\");\r\n    if (!email) errors.push(\"Customer email is required\");\r\n    if (!phone) errors.push(\"Customer phone is required\");\r\n  }\r\n\r\n  // Validate address\r\n  if (!orderData.address) {\r\n    errors.push(\"Address is required\");\r\n  } else {\r\n    const { street, city, postcode } = orderData.address;\r\n    if (!street) errors.push(\"Street address is required\");\r\n    if (!city) errors.push(\"City is required\");\r\n    if (!postcode) errors.push(\"Postcode is required\");\r\n  }\r\n\r\n  // Validate amount\r\n  if (!orderData.amount) {\r\n    errors.push(\"Amount information is required\");\r\n  } else {\r\n    const { subtotal, total, deliveryFee } = orderData.amount;\r\n    if (typeof subtotal !== \"number\") errors.push(\"Subtotal must be a number\");\r\n    if (typeof total !== \"number\") errors.push(\"Total must be a number\");\r\n    if (typeof deliveryFee !== \"number\")\r\n      errors.push(\"Delivery fee must be a number\");\r\n  }\r\n\r\n  // Validate delivery time\r\n  if (!orderData.deliveryTime?.requested) {\r\n    errors.push(\"Delivery time is required\");\r\n  }\r\n\r\n  if (errors.length > 0) {\r\n    throw new Error(errors.join(\", \"));\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// Axios Instance Configuration\r\nconst api = axios.create({\r\n  baseURL: API_CONFIG.baseURL,\r\n  timeout: API_CONFIG.timeout,\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Request Interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    if (API_CONFIG.environment === \"development\") {\r\n      console.log(\"API Request:\", {\r\n        method: config.method?.toUpperCase(),\r\n        url: config.url,\r\n        data: config.data,\r\n      });\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"Request Interceptor Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response Interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    if (API_CONFIG.environment === \"development\") {\r\n      console.log(\"API Response:\", {\r\n        status: response.status,\r\n        data: response.data,\r\n      });\r\n    }\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // Retry logic for failed requests\r\n    if (\r\n      !originalRequest._retry &&\r\n      originalRequest.retryAttempt < API_CONFIG.retryAttempts\r\n    ) {\r\n      originalRequest._retry = true;\r\n      originalRequest.retryAttempt = (originalRequest.retryAttempt || 0) + 1;\r\n\r\n      await new Promise((resolve) =>\r\n        setTimeout(resolve, API_CONFIG.retryDelay)\r\n      );\r\n      return api(originalRequest);\r\n    }\r\n\r\n    console.error(\"API Error:\", {\r\n      message: error.message,\r\n      response: error.response?.data,\r\n      status: error.response?.status,\r\n      url: originalRequest?.url,\r\n    });\r\n\r\n    return Promise.reject(\r\n      new APIError(\r\n        error.response?.data?.message || error.message,\r\n        error.response?.status || 500,\r\n        error.response?.data\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n// Payment API\r\nexport const paymentAPI = {\r\n  createPaymentIntent: async (data) => {\r\n    try {\r\n      validateAmount(data.amount);\r\n\r\n      const response = await api.post(\"/api/orders/create-payment-intent\", {\r\n        amount: data.amount,\r\n        currency: data.currency || \"gbp\",\r\n        metadata: {\r\n          ...data.metadata,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      });\r\n\r\n      if (!response.data?.clientSecret) {\r\n        throw new Error(\r\n          \"No client secret received from payment intent creation\"\r\n        );\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Payment Intent Creation Error:\", error);\r\n      throw error instanceof APIError\r\n        ? error\r\n        : new APIError(\r\n            error.message,\r\n            error.response?.status || 500,\r\n            error.response?.data\r\n          );\r\n    }\r\n  },\r\n\r\n  createOrder: async (orderData) => {\r\n    try {\r\n      validateOrderData(orderData);\r\n\r\n      console.log(\r\n        \"Sending order data to API:\",\r\n        JSON.stringify(orderData, null, 2)\r\n      );\r\n\r\n      const response = await api.post(\"/api/orders\", orderData);\r\n\r\n      console.log(\"API Response:\", response.data);\r\n\r\n      if (!response.data?.orderId) {\r\n        throw new Error(\"Order creation failed: No order ID received\");\r\n      }\r\n\r\n      return {\r\n        orderId: response.data.orderId,\r\n        status: response.data.status,\r\n      };\r\n    } catch (error) {\r\n      if (error.response?.data?.details) {\r\n        console.error(\"Validation errors:\", error.response.data.details);\r\n        throw new APIError(\r\n          \"Order validation failed: \" + error.response.data.details.join(\", \"),\r\n          error.response.status,\r\n          error.response.data\r\n        );\r\n      }\r\n      throw error instanceof APIError\r\n        ? error\r\n        : new APIError(\r\n            error.message,\r\n            error.response?.status || 500,\r\n            error.response?.data\r\n          );\r\n    }\r\n  },\r\n\r\n  getOrder: async (orderId) => {\r\n    try {\r\n      if (!orderId) throw new Error(\"Order ID is required\");\r\n\r\n      const response = await api.get(`/api/orders/${orderId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Get Order Error:\", error);\r\n      throw error instanceof APIError\r\n        ? error\r\n        : new APIError(\r\n            error.message,\r\n            error.response?.status || 500,\r\n            error.response?.data\r\n          );\r\n    }\r\n  },\r\n\r\n  updateOrderStatus: async (orderId, status) => {\r\n    try {\r\n      if (!orderId) throw new Error(\"Order ID is required\");\r\n      if (!status) throw new Error(\"Status is required\");\r\n\r\n      const response = await api.patch(`/api/orders/${orderId}/status`, {\r\n        status,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Order Status Update Error:\", error);\r\n      throw error instanceof APIError\r\n        ? error\r\n        : new APIError(\r\n            error.message,\r\n            error.response?.status || 500,\r\n            error.response?.data\r\n          );\r\n    }\r\n  },\r\n\r\n  cancelOrder: async (orderId, reason) => {\r\n    try {\r\n      if (!orderId) throw new Error(\"Order ID is required\");\r\n\r\n      const response = await api.post(`/api/orders/${orderId}/cancel`, {\r\n        reason,\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Order Cancellation Error:\", error);\r\n      throw error instanceof APIError\r\n        ? error\r\n        : new APIError(\r\n            error.message,\r\n            error.response?.status || 500,\r\n            error.response?.data\r\n          );\r\n    }\r\n  },\r\n};\r\n\r\n// Health Check\r\nexport const checkAPIHealth = async () => {\r\n  try {\r\n    const startTime = Date.now();\r\n    const response = await api.get(\"/api/health\");\r\n    const endTime = Date.now();\r\n\r\n    return {\r\n      isHealthy: true,\r\n      responseTime: endTime - startTime,\r\n      status: response.data.status,\r\n      timestamp: new Date().toISOString(),\r\n      environment: API_CONFIG.environment,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      isHealthy: false,\r\n      error: error.message,\r\n      timestamp: new Date().toISOString(),\r\n      environment: API_CONFIG.environment,\r\n    };\r\n  }\r\n};\r\n\r\nexport const retryRequest = async (\r\n  fn,\r\n  retries = API_CONFIG.retryAttempts,\r\n  delay = API_CONFIG.retryDelay\r\n) => {\r\n  try {\r\n    return await fn();\r\n  } catch (error) {\r\n    if (retries === 0) throw error;\r\n    await new Promise((resolve) => setTimeout(resolve, delay));\r\n    return retryRequest(fn, retries - 1, delay * 2);\r\n  }\r\n};\r\n\r\nexport const getAPIConfig = () => ({\r\n  ...API_CONFIG,\r\n  currentTime: new Date().toISOString(),\r\n});\r\n\r\nconst apiService = {\r\n  api,\r\n  paymentAPI,\r\n  checkAPIHealth,\r\n  retryRequest,\r\n  getAPIConfig,\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAC3BC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAE;IACjC,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACG,IAAI,GAAG,UAAU;IACtB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,MAAMC,UAAU,GAAG;EACjBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC3CC,OAAO,EAAE,KAAK;EACdC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAEN,OAAO,CAACC,GAAG,CAACM;AAC3B,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACjC,IAAI,CAACA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIC,KAAK,CAACD,MAAM,CAAC,IAAIA,MAAM,IAAI,CAAC,EAAE;IACzE,MAAM,IAAIpB,KAAK,CACb,2DACF,CAAC;EACH;EACA,IAAI,CAACsB,MAAM,CAACC,SAAS,CAACH,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIpB,KAAK,CAAC,mCAAmC,CAAC;EACtD;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAMwB,iBAAiB,GAAIC,SAAS,IAAK;EAAA,IAAAC,qBAAA;EACvC,IAAI,CAACD,SAAS,EAAE,MAAM,IAAIzB,KAAK,CAAC,wBAAwB,CAAC;EAEzD,MAAM2B,MAAM,GAAG,EAAE;;EAEjB;EACA,IAAI,CAACF,SAAS,CAACG,eAAe,EAAE;IAC9BD,MAAM,CAACE,IAAI,CAAC,+BAA+B,CAAC;EAC9C;;EAEA;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACN,SAAS,CAACO,YAAY,CAAC,EAAE;IAC1CL,MAAM,CAACE,IAAI,CAAC,gCAAgC,CAAC;EAC/C,CAAC,MAAM,IAAIJ,SAAS,CAACO,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9CN,MAAM,CAACE,IAAI,CAAC,sCAAsC,CAAC;EACrD,CAAC,MAAM;IACLJ,SAAS,CAACO,YAAY,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC9C,IAAI,CAACD,IAAI,CAAC9B,IAAI,EAAEsB,MAAM,CAACE,IAAI,CAAC,QAAQO,KAAK,GAAG,CAAC,oBAAoB,CAAC;MAClE,IAAI,CAACD,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,IAAI,CAAC,EACtCV,MAAM,CAACE,IAAI,CAAC,QAAQO,KAAK,GAAG,CAAC,uBAAuB,CAAC;MACvD,IAAI,CAACD,IAAI,CAACG,KAAK,EAAEX,MAAM,CAACE,IAAI,CAAC,QAAQO,KAAK,GAAG,CAAC,qBAAqB,CAAC;IACtE,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI,CAACX,SAAS,CAACc,QAAQ,EAAE;IACvBZ,MAAM,CAACE,IAAI,CAAC,kCAAkC,CAAC;EACjD,CAAC,MAAM;IACL,MAAM;MAAExB,IAAI;MAAEmC,KAAK;MAAEC;IAAM,CAAC,GAAGhB,SAAS,CAACc,QAAQ;IACjD,IAAI,CAAClC,IAAI,EAAEsB,MAAM,CAACE,IAAI,CAAC,2BAA2B,CAAC;IACnD,IAAI,CAACW,KAAK,EAAEb,MAAM,CAACE,IAAI,CAAC,4BAA4B,CAAC;IACrD,IAAI,CAACY,KAAK,EAAEd,MAAM,CAACE,IAAI,CAAC,4BAA4B,CAAC;EACvD;;EAEA;EACA,IAAI,CAACJ,SAAS,CAACiB,OAAO,EAAE;IACtBf,MAAM,CAACE,IAAI,CAAC,qBAAqB,CAAC;EACpC,CAAC,MAAM;IACL,MAAM;MAAEc,MAAM;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGpB,SAAS,CAACiB,OAAO;IACpD,IAAI,CAACC,MAAM,EAAEhB,MAAM,CAACE,IAAI,CAAC,4BAA4B,CAAC;IACtD,IAAI,CAACe,IAAI,EAAEjB,MAAM,CAACE,IAAI,CAAC,kBAAkB,CAAC;IAC1C,IAAI,CAACgB,QAAQ,EAAElB,MAAM,CAACE,IAAI,CAAC,sBAAsB,CAAC;EACpD;;EAEA;EACA,IAAI,CAACJ,SAAS,CAACL,MAAM,EAAE;IACrBO,MAAM,CAACE,IAAI,CAAC,gCAAgC,CAAC;EAC/C,CAAC,MAAM;IACL,MAAM;MAAEiB,QAAQ;MAAEC,KAAK;MAAEC;IAAY,CAAC,GAAGvB,SAAS,CAACL,MAAM;IACzD,IAAI,OAAO0B,QAAQ,KAAK,QAAQ,EAAEnB,MAAM,CAACE,IAAI,CAAC,2BAA2B,CAAC;IAC1E,IAAI,OAAOkB,KAAK,KAAK,QAAQ,EAAEpB,MAAM,CAACE,IAAI,CAAC,wBAAwB,CAAC;IACpE,IAAI,OAAOmB,WAAW,KAAK,QAAQ,EACjCrB,MAAM,CAACE,IAAI,CAAC,+BAA+B,CAAC;EAChD;;EAEA;EACA,IAAI,GAAAH,qBAAA,GAACD,SAAS,CAACwB,YAAY,cAAAvB,qBAAA,eAAtBA,qBAAA,CAAwBwB,SAAS,GAAE;IACtCvB,MAAM,CAACE,IAAI,CAAC,2BAA2B,CAAC;EAC1C;EAEA,IAAIF,MAAM,CAACM,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIjC,KAAK,CAAC2B,MAAM,CAACwB,IAAI,CAAC,IAAI,CAAC,CAAC;EACpC;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGtD,KAAK,CAACuD,MAAM,CAAC;EACvB3C,OAAO,EAAED,UAAU,CAACC,OAAO;EAC3BI,OAAO,EAAEL,UAAU,CAACK,OAAO;EAC3BwC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,IAAIlD,UAAU,CAACQ,WAAW,KAAK,aAAa,EAAE;IAAA,IAAA2C,cAAA;IAC5CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE;MAC1BC,MAAM,GAAAH,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC;MACpCC,GAAG,EAAEN,MAAM,CAACM,GAAG;MACf7D,IAAI,EAAEuD,MAAM,CAACvD;IACf,CAAC,CAAC;EACJ;EACA,OAAOuD,MAAM;AACf,CAAC,EACAO,KAAK,IAAK;EACTL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EAClD,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC1BW,QAAQ,IAAK;EACZ,IAAI5D,UAAU,CAACQ,WAAW,KAAK,aAAa,EAAE;IAC5C4C,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;MAC3B3D,MAAM,EAAEkE,QAAQ,CAAClE,MAAM;MACvBC,IAAI,EAAEiE,QAAQ,CAACjE;IACjB,CAAC,CAAC;EACJ;EACA,OAAOiE,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACf,MAAMC,eAAe,GAAGV,KAAK,CAACP,MAAM;;EAEpC;EACA,IACE,CAACiB,eAAe,CAACC,MAAM,IACvBD,eAAe,CAACE,YAAY,GAAGrE,UAAU,CAACM,aAAa,EACvD;IACA6D,eAAe,CAACC,MAAM,GAAG,IAAI;IAC7BD,eAAe,CAACE,YAAY,GAAG,CAACF,eAAe,CAACE,YAAY,IAAI,CAAC,IAAI,CAAC;IAEtE,MAAM,IAAIX,OAAO,CAAEY,OAAO,IACxBC,UAAU,CAACD,OAAO,EAAEtE,UAAU,CAACO,UAAU,CAC3C,CAAC;IACD,OAAOoC,GAAG,CAACwB,eAAe,CAAC;EAC7B;EAEAf,OAAO,CAACK,KAAK,CAAC,YAAY,EAAE;IAC1BhE,OAAO,EAAEgE,KAAK,CAAChE,OAAO;IACtBmE,QAAQ,GAAAC,eAAA,GAAEJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBlE,IAAI;IAC9BD,MAAM,GAAAoE,gBAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBpE,MAAM;IAC9B8D,GAAG,EAAEW,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEX;EACxB,CAAC,CAAC;EAEF,OAAOE,OAAO,CAACC,MAAM,CACnB,IAAIrE,QAAQ,CACV,EAAAyE,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpE,IAAI,cAAAqE,qBAAA,uBAApBA,qBAAA,CAAsBvE,OAAO,KAAIgE,KAAK,CAAChE,OAAO,EAC9C,EAAAwE,gBAAA,GAAAR,KAAK,CAACG,QAAQ,cAAAK,gBAAA,uBAAdA,gBAAA,CAAgBvE,MAAM,KAAI,GAAG,GAAAwE,gBAAA,GAC7BT,KAAK,CAACG,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBvE,IAClB,CACF,CAAC;AACH,CACF,CAAC;;AAED;AACA,OAAO,MAAM6E,UAAU,GAAG;EACxBC,mBAAmB,EAAE,MAAO9E,IAAI,IAAK;IACnC,IAAI;MAAA,IAAA+E,cAAA;MACFhE,cAAc,CAACf,IAAI,CAACgB,MAAM,CAAC;MAE3B,MAAMiD,QAAQ,GAAG,MAAMjB,GAAG,CAACgC,IAAI,CAAC,mCAAmC,EAAE;QACnEhE,MAAM,EAAEhB,IAAI,CAACgB,MAAM;QACnBiE,QAAQ,EAAEjF,IAAI,CAACiF,QAAQ,IAAI,KAAK;QAChCC,QAAQ,EAAE;UACR,GAAGlF,IAAI,CAACkF,QAAQ;UAChBhF,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC;MACF,CAAC,CAAC;MAEF,IAAI,GAAA2E,cAAA,GAACd,QAAQ,CAACjE,IAAI,cAAA+E,cAAA,eAAbA,cAAA,CAAeI,YAAY,GAAE;QAChC,MAAM,IAAIvF,KAAK,CACb,wDACF,CAAC;MACH;MAEA,OAAOqE,QAAQ,CAACjE,IAAI;IACtB,CAAC,CAAC,OAAO8D,KAAK,EAAE;MAAA,IAAAsB,gBAAA,EAAAC,gBAAA;MACd5B,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK,YAAYnE,QAAQ,GAC3BmE,KAAK,GACL,IAAInE,QAAQ,CACVmE,KAAK,CAAChE,OAAO,EACb,EAAAsF,gBAAA,GAAAtB,KAAK,CAACG,QAAQ,cAAAmB,gBAAA,uBAAdA,gBAAA,CAAgBrF,MAAM,KAAI,GAAG,GAAAsF,gBAAA,GAC7BvB,KAAK,CAACG,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBrF,IAClB,CAAC;IACP;EACF,CAAC;EAEDsF,WAAW,EAAE,MAAOjE,SAAS,IAAK;IAChC,IAAI;MAAA,IAAAkE,eAAA;MACFnE,iBAAiB,CAACC,SAAS,CAAC;MAE5BoC,OAAO,CAACC,GAAG,CACT,4BAA4B,EAC5B8B,IAAI,CAACC,SAAS,CAACpE,SAAS,EAAE,IAAI,EAAE,CAAC,CACnC,CAAC;MAED,MAAM4C,QAAQ,GAAG,MAAMjB,GAAG,CAACgC,IAAI,CAAC,aAAa,EAAE3D,SAAS,CAAC;MAEzDoC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEO,QAAQ,CAACjE,IAAI,CAAC;MAE3C,IAAI,GAAAuF,eAAA,GAACtB,QAAQ,CAACjE,IAAI,cAAAuF,eAAA,eAAbA,eAAA,CAAeG,OAAO,GAAE;QAC3B,MAAM,IAAI9F,KAAK,CAAC,6CAA6C,CAAC;MAChE;MAEA,OAAO;QACL8F,OAAO,EAAEzB,QAAQ,CAACjE,IAAI,CAAC0F,OAAO;QAC9B3F,MAAM,EAAEkE,QAAQ,CAACjE,IAAI,CAACD;MACxB,CAAC;IACH,CAAC,CAAC,OAAO+D,KAAK,EAAE;MAAA,IAAA6B,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,iBAAA;MACd,KAAAH,gBAAA,GAAI7B,KAAK,CAACG,QAAQ,cAAA0B,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgB3F,IAAI,cAAA4F,qBAAA,eAApBA,qBAAA,CAAsBG,OAAO,EAAE;QACjCtC,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACG,QAAQ,CAACjE,IAAI,CAAC+F,OAAO,CAAC;QAChE,MAAM,IAAIpG,QAAQ,CAChB,2BAA2B,GAAGmE,KAAK,CAACG,QAAQ,CAACjE,IAAI,CAAC+F,OAAO,CAAChD,IAAI,CAAC,IAAI,CAAC,EACpEe,KAAK,CAACG,QAAQ,CAAClE,MAAM,EACrB+D,KAAK,CAACG,QAAQ,CAACjE,IACjB,CAAC;MACH;MACA,MAAM8D,KAAK,YAAYnE,QAAQ,GAC3BmE,KAAK,GACL,IAAInE,QAAQ,CACVmE,KAAK,CAAChE,OAAO,EACb,EAAA+F,gBAAA,GAAA/B,KAAK,CAACG,QAAQ,cAAA4B,gBAAA,uBAAdA,gBAAA,CAAgB9F,MAAM,KAAI,GAAG,GAAA+F,iBAAA,GAC7BhC,KAAK,CAACG,QAAQ,cAAA6B,iBAAA,uBAAdA,iBAAA,CAAgB9F,IAClB,CAAC;IACP;EACF,CAAC;EAEDgG,QAAQ,EAAE,MAAON,OAAO,IAAK;IAC3B,IAAI;MACF,IAAI,CAACA,OAAO,EAAE,MAAM,IAAI9F,KAAK,CAAC,sBAAsB,CAAC;MAErD,MAAMqE,QAAQ,GAAG,MAAMjB,GAAG,CAACiD,GAAG,CAAC,eAAeP,OAAO,EAAE,CAAC;MACxD,OAAOzB,QAAQ,CAACjE,IAAI;IACtB,CAAC,CAAC,OAAO8D,KAAK,EAAE;MAAA,IAAAoC,iBAAA,EAAAC,iBAAA;MACd1C,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK,YAAYnE,QAAQ,GAC3BmE,KAAK,GACL,IAAInE,QAAQ,CACVmE,KAAK,CAAChE,OAAO,EACb,EAAAoG,iBAAA,GAAApC,KAAK,CAACG,QAAQ,cAAAiC,iBAAA,uBAAdA,iBAAA,CAAgBnG,MAAM,KAAI,GAAG,GAAAoG,iBAAA,GAC7BrC,KAAK,CAACG,QAAQ,cAAAkC,iBAAA,uBAAdA,iBAAA,CAAgBnG,IAClB,CAAC;IACP;EACF,CAAC;EAEDoG,iBAAiB,EAAE,MAAAA,CAAOV,OAAO,EAAE3F,MAAM,KAAK;IAC5C,IAAI;MACF,IAAI,CAAC2F,OAAO,EAAE,MAAM,IAAI9F,KAAK,CAAC,sBAAsB,CAAC;MACrD,IAAI,CAACG,MAAM,EAAE,MAAM,IAAIH,KAAK,CAAC,oBAAoB,CAAC;MAElD,MAAMqE,QAAQ,GAAG,MAAMjB,GAAG,CAACqD,KAAK,CAAC,eAAeX,OAAO,SAAS,EAAE;QAChE3F;MACF,CAAC,CAAC;MACF,OAAOkE,QAAQ,CAACjE,IAAI;IACtB,CAAC,CAAC,OAAO8D,KAAK,EAAE;MAAA,IAAAwC,iBAAA,EAAAC,iBAAA;MACd9C,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK,YAAYnE,QAAQ,GAC3BmE,KAAK,GACL,IAAInE,QAAQ,CACVmE,KAAK,CAAChE,OAAO,EACb,EAAAwG,iBAAA,GAAAxC,KAAK,CAACG,QAAQ,cAAAqC,iBAAA,uBAAdA,iBAAA,CAAgBvG,MAAM,KAAI,GAAG,GAAAwG,iBAAA,GAC7BzC,KAAK,CAACG,QAAQ,cAAAsC,iBAAA,uBAAdA,iBAAA,CAAgBvG,IAClB,CAAC;IACP;EACF,CAAC;EAEDwG,WAAW,EAAE,MAAAA,CAAOd,OAAO,EAAEe,MAAM,KAAK;IACtC,IAAI;MACF,IAAI,CAACf,OAAO,EAAE,MAAM,IAAI9F,KAAK,CAAC,sBAAsB,CAAC;MAErD,MAAMqE,QAAQ,GAAG,MAAMjB,GAAG,CAACgC,IAAI,CAAC,eAAeU,OAAO,SAAS,EAAE;QAC/De;MACF,CAAC,CAAC;MACF,OAAOxC,QAAQ,CAACjE,IAAI;IACtB,CAAC,CAAC,OAAO8D,KAAK,EAAE;MAAA,IAAA4C,iBAAA,EAAAC,iBAAA;MACdlD,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK,YAAYnE,QAAQ,GAC3BmE,KAAK,GACL,IAAInE,QAAQ,CACVmE,KAAK,CAAChE,OAAO,EACb,EAAA4G,iBAAA,GAAA5C,KAAK,CAACG,QAAQ,cAAAyC,iBAAA,uBAAdA,iBAAA,CAAgB3G,MAAM,KAAI,GAAG,GAAA4G,iBAAA,GAC7B7C,KAAK,CAACG,QAAQ,cAAA0C,iBAAA,uBAAdA,iBAAA,CAAgB3G,IAClB,CAAC;IACP;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM4G,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,SAAS,GAAG1G,IAAI,CAAC2G,GAAG,CAAC,CAAC;IAC5B,MAAM7C,QAAQ,GAAG,MAAMjB,GAAG,CAACiD,GAAG,CAAC,aAAa,CAAC;IAC7C,MAAMc,OAAO,GAAG5G,IAAI,CAAC2G,GAAG,CAAC,CAAC;IAE1B,OAAO;MACLE,SAAS,EAAE,IAAI;MACfC,YAAY,EAAEF,OAAO,GAAGF,SAAS;MACjC9G,MAAM,EAAEkE,QAAQ,CAACjE,IAAI,CAACD,MAAM;MAC5BG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCS,WAAW,EAAER,UAAU,CAACQ;IAC1B,CAAC;EACH,CAAC,CAAC,OAAOiD,KAAK,EAAE;IACd,OAAO;MACLkD,SAAS,EAAE,KAAK;MAChBlD,KAAK,EAAEA,KAAK,CAAChE,OAAO;MACpBI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCS,WAAW,EAAER,UAAU,CAACQ;IAC1B,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMqG,YAAY,GAAG,MAAAA,CAC1BC,EAAE,EACFC,OAAO,GAAG/G,UAAU,CAACM,aAAa,EAClC0G,KAAK,GAAGhH,UAAU,CAACO,UAAU,KAC1B;EACH,IAAI;IACF,OAAO,MAAMuG,EAAE,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOrD,KAAK,EAAE;IACd,IAAIsD,OAAO,KAAK,CAAC,EAAE,MAAMtD,KAAK;IAC9B,MAAM,IAAIC,OAAO,CAAEY,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE0C,KAAK,CAAC,CAAC;IAC1D,OAAOH,YAAY,CAACC,EAAE,EAAEC,OAAO,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,MAAO;EACjC,GAAGjH,UAAU;EACbkH,WAAW,EAAE,IAAIpH,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACtC,CAAC,CAAC;AAEF,MAAMoH,UAAU,GAAG;EACjBxE,GAAG;EACH6B,UAAU;EACV+B,cAAc;EACdM,YAAY;EACZI;AACF,CAAC;AAED,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}