{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rui Seca\\\\savannah-bites\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst CART_STORAGE_KEY = \"savannah_bites_cart\";\nconst DEALS_STORAGE_KEY = \"savannah_bites_deals\";\nconst CART_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds\n\nexport function CartProvider({\n  children\n}) {\n  _s();\n  // Existing cart state\n  const [cart, setCart] = useState(() => {\n    try {\n      const savedCart = localStorage.getItem(CART_STORAGE_KEY);\n      return savedCart ? JSON.parse(savedCart) : [];\n    } catch (error) {\n      console.error(\"Error loading cart from storage:\", error);\n      return [];\n    }\n  });\n\n  // Add deals state\n  const [activeDeal, setActiveDeal] = useState(() => {\n    try {\n      const savedDeal = localStorage.getItem(DEALS_STORAGE_KEY);\n      return savedDeal ? JSON.parse(savedDeal) : null;\n    } catch (error) {\n      console.error(\"Error loading deal from storage:\", error);\n      return null;\n    }\n  });\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\n\n  // Save cart and deals to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));\n      localStorage.setItem(DEALS_STORAGE_KEY, JSON.stringify(activeDeal));\n      setLastUpdated(Date.now());\n    } catch (error) {\n      console.error(\"Error saving cart/deals to storage:\", error);\n    }\n  }, [cart, activeDeal]);\n  const clearCart = useCallback(() => {\n    setCart([]);\n    setActiveDeal(null);\n    localStorage.removeItem(CART_STORAGE_KEY);\n    localStorage.removeItem(DEALS_STORAGE_KEY);\n  }, []);\n\n  // Existing timeout effect\n  useEffect(() => {\n    const checkCartTimeout = () => {\n      if (Date.now() - lastUpdated > CART_TIMEOUT) {\n        clearCart();\n      }\n    };\n    const interval = setInterval(checkCartTimeout, 1000 * 60);\n    return () => clearInterval(interval);\n  }, [lastUpdated, clearCart]);\n\n  // Existing helper functions\n  const getItemKey = useCallback((id, size) => `${id}-${size || \"default\"}`, []);\n\n  // Add deal-related functions\n  const startDeal = useCallback(deal => {\n    setActiveDeal({\n      ...deal,\n      startedAt: new Date().toISOString(),\n      itemsFulfilled: {}\n    });\n  }, []);\n  const cancelDeal = useCallback(() => {\n    setActiveDeal(null);\n  }, []);\n  const checkDealRequirements = useCallback((deal, cartItems) => {\n    const itemsByCategory = cartItems.reduce((acc, item) => {\n      if (!acc[item.category]) {\n        acc[item.category] = [];\n      }\n      acc[item.category].push(item);\n      return acc;\n    }, {});\n    return Object.entries(deal.requirements).every(([category, requirement]) => {\n      const categoryItems = itemsByCategory[category] || [];\n      const validItems = categoryItems.filter(item => requirement.size === \"any\" || item.size === requirement.size);\n      const totalCount = validItems.reduce((sum, item) => sum + item.quantity, 0);\n      return totalCount >= requirement.count;\n    });\n  }, []);\n\n  // Modified addToCart to handle deals\n  const addToCart = useCallback(item => {\n    setCart(currentCart => {\n      const itemKey = getItemKey(item.id, item.size);\n      const existingItemIndex = currentCart.findIndex(cartItem => getItemKey(cartItem.id, cartItem.size) === itemKey);\n      let updatedCart;\n      if (existingItemIndex !== -1) {\n        updatedCart = currentCart.map((cartItem, index) => index === existingItemIndex ? {\n          ...cartItem,\n          quantity: cartItem.quantity + 1\n        } : cartItem);\n      } else {\n        updatedCart = [...currentCart, {\n          ...item,\n          quantity: 1,\n          cartItemId: itemKey,\n          addedAt: new Date().toISOString()\n        }];\n      }\n\n      // Check if this item completes a deal\n      if (activeDeal) {\n        const isDealComplete = checkDealRequirements(activeDeal, updatedCart);\n        if (isDealComplete) {\n          // Apply deal discount logic here\n          updatedCart = updatedCart.map(item => ({\n            ...item,\n            inDeal: true\n          }));\n        }\n      }\n      return updatedCart;\n    });\n  }, [getItemKey, activeDeal, checkDealRequirements]);\n\n  // Modified cart total calculation to handle deals\n  const cartTotal = useCallback(() => {\n    if (!activeDeal) {\n      return cart.reduce((total, item) => {\n        const price = getItemPrice(item);\n        return total + price * item.quantity;\n      }, 0);\n    }\n\n    // If there's an active deal and requirements are met, apply deal price\n    if (checkDealRequirements(activeDeal, cart)) {\n      return activeDeal.price;\n    }\n\n    // If deal requirements aren't met, calculate regular price\n    return cart.reduce((total, item) => {\n      const price = getItemPrice(item);\n      return total + price * item.quantity;\n    }, 0);\n  }, [cart, activeDeal, checkDealRequirements, getItemPrice]);\n\n  // Existing functions\n  const removeFromCart = useCallback((itemId, size = null) => {\n    setCart(currentCart => {\n      const itemKey = getItemKey(itemId, size);\n      const updatedCart = currentCart.filter(item => getItemKey(item.id, item.size) !== itemKey);\n\n      // Check if removing this item affects any active deal\n      if (activeDeal && !checkDealRequirements(activeDeal, updatedCart)) {\n        // Remove deal markers if requirements are no longer met\n        return updatedCart.map(item => ({\n          ...item,\n          inDeal: false\n        }));\n      }\n      return updatedCart;\n    });\n  }, [getItemKey, activeDeal, checkDealRequirements]);\n  const updateQuantity = useCallback((itemId, newQuantity, size = null) => {\n    if (newQuantity < 1) {\n      removeFromCart(itemId, size);\n      return;\n    }\n    setCart(currentCart => {\n      const itemKey = getItemKey(itemId, size);\n      const updatedCart = currentCart.map(item => getItemKey(item.id, item.size) === itemKey ? {\n        ...item,\n        quantity: newQuantity\n      } : item);\n\n      // Check if quantity change affects any active deal\n      if (activeDeal) {\n        const isDealValid = checkDealRequirements(activeDeal, updatedCart);\n        return updatedCart.map(item => ({\n          ...item,\n          inDeal: isDealValid\n        }));\n      }\n      return updatedCart;\n    });\n  }, [removeFromCart, getItemKey, activeDeal, checkDealRequirements]);\n\n  // Rest of your existing functions...\n\n  const value = {\n    cart,\n    activeDeal,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    cartTotal,\n    cartItemsCount,\n    isItemInCart,\n    updateItemNote,\n    getItemPrice,\n    startDeal,\n    cancelDeal,\n    checkDealRequirements\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 10\n  }, this);\n}\n_s(CartProvider, \"U7wyaji6juZyC1Xf5imusZYBJfc=\");\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsxDEV","_jsxDEV","CartContext","CART_STORAGE_KEY","DEALS_STORAGE_KEY","CART_TIMEOUT","CartProvider","children","_s","cart","setCart","savedCart","localStorage","getItem","JSON","parse","error","console","activeDeal","setActiveDeal","savedDeal","lastUpdated","setLastUpdated","Date","now","setItem","stringify","clearCart","removeItem","checkCartTimeout","interval","setInterval","clearInterval","getItemKey","id","size","startDeal","deal","startedAt","toISOString","itemsFulfilled","cancelDeal","checkDealRequirements","cartItems","itemsByCategory","reduce","acc","item","category","push","Object","entries","requirements","every","requirement","categoryItems","validItems","filter","totalCount","sum","quantity","count","addToCart","currentCart","itemKey","existingItemIndex","findIndex","cartItem","updatedCart","map","index","cartItemId","addedAt","isDealComplete","inDeal","cartTotal","total","price","getItemPrice","removeFromCart","itemId","updateQuantity","newQuantity","isDealValid","value","cartItemsCount","isItemInCart","updateItemNote","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/Rui Seca/savannah-bites/frontend/src/context/CartContext.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nconst CartContext = createContext();\r\n\r\nconst CART_STORAGE_KEY = \"savannah_bites_cart\";\r\nconst DEALS_STORAGE_KEY = \"savannah_bites_deals\";\r\nconst CART_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds\r\n\r\nexport function CartProvider({ children }) {\r\n  // Existing cart state\r\n  const [cart, setCart] = useState(() => {\r\n    try {\r\n      const savedCart = localStorage.getItem(CART_STORAGE_KEY);\r\n      return savedCart ? JSON.parse(savedCart) : [];\r\n    } catch (error) {\r\n      console.error(\"Error loading cart from storage:\", error);\r\n      return [];\r\n    }\r\n  });\r\n\r\n  // Add deals state\r\n  const [activeDeal, setActiveDeal] = useState(() => {\r\n    try {\r\n      const savedDeal = localStorage.getItem(DEALS_STORAGE_KEY);\r\n      return savedDeal ? JSON.parse(savedDeal) : null;\r\n    } catch (error) {\r\n      console.error(\"Error loading deal from storage:\", error);\r\n      return null;\r\n    }\r\n  });\r\n\r\n  const [lastUpdated, setLastUpdated] = useState(Date.now());\r\n\r\n  // Save cart and deals to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cart));\r\n      localStorage.setItem(DEALS_STORAGE_KEY, JSON.stringify(activeDeal));\r\n      setLastUpdated(Date.now());\r\n    } catch (error) {\r\n      console.error(\"Error saving cart/deals to storage:\", error);\r\n    }\r\n  }, [cart, activeDeal]);\r\n\r\n  const clearCart = useCallback(() => {\r\n    setCart([]);\r\n    setActiveDeal(null);\r\n    localStorage.removeItem(CART_STORAGE_KEY);\r\n    localStorage.removeItem(DEALS_STORAGE_KEY);\r\n  }, []);\r\n\r\n  // Existing timeout effect\r\n  useEffect(() => {\r\n    const checkCartTimeout = () => {\r\n      if (Date.now() - lastUpdated > CART_TIMEOUT) {\r\n        clearCart();\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(checkCartTimeout, 1000 * 60);\r\n    return () => clearInterval(interval);\r\n  }, [lastUpdated, clearCart]);\r\n\r\n  // Existing helper functions\r\n  const getItemKey = useCallback(\r\n    (id, size) => `${id}-${size || \"default\"}`,\r\n    []\r\n  );\r\n\r\n  // Add deal-related functions\r\n  const startDeal = useCallback((deal) => {\r\n    setActiveDeal({\r\n      ...deal,\r\n      startedAt: new Date().toISOString(),\r\n      itemsFulfilled: {},\r\n    });\r\n  }, []);\r\n\r\n  const cancelDeal = useCallback(() => {\r\n    setActiveDeal(null);\r\n  }, []);\r\n\r\n  const checkDealRequirements = useCallback((deal, cartItems) => {\r\n    const itemsByCategory = cartItems.reduce((acc, item) => {\r\n      if (!acc[item.category]) {\r\n        acc[item.category] = [];\r\n      }\r\n      acc[item.category].push(item);\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.entries(deal.requirements).every(\r\n      ([category, requirement]) => {\r\n        const categoryItems = itemsByCategory[category] || [];\r\n        const validItems = categoryItems.filter(\r\n          (item) => requirement.size === \"any\" || item.size === requirement.size\r\n        );\r\n        const totalCount = validItems.reduce(\r\n          (sum, item) => sum + item.quantity,\r\n          0\r\n        );\r\n        return totalCount >= requirement.count;\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  // Modified addToCart to handle deals\r\n  const addToCart = useCallback(\r\n    (item) => {\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(item.id, item.size);\r\n        const existingItemIndex = currentCart.findIndex(\r\n          (cartItem) => getItemKey(cartItem.id, cartItem.size) === itemKey\r\n        );\r\n\r\n        let updatedCart;\r\n        if (existingItemIndex !== -1) {\r\n          updatedCart = currentCart.map((cartItem, index) =>\r\n            index === existingItemIndex\r\n              ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n              : cartItem\r\n          );\r\n        } else {\r\n          updatedCart = [\r\n            ...currentCart,\r\n            {\r\n              ...item,\r\n              quantity: 1,\r\n              cartItemId: itemKey,\r\n              addedAt: new Date().toISOString(),\r\n            },\r\n          ];\r\n        }\r\n\r\n        // Check if this item completes a deal\r\n        if (activeDeal) {\r\n          const isDealComplete = checkDealRequirements(activeDeal, updatedCart);\r\n          if (isDealComplete) {\r\n            // Apply deal discount logic here\r\n            updatedCart = updatedCart.map((item) => ({\r\n              ...item,\r\n              inDeal: true,\r\n            }));\r\n          }\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  // Modified cart total calculation to handle deals\r\n  const cartTotal = useCallback(() => {\r\n    if (!activeDeal) {\r\n      return cart.reduce((total, item) => {\r\n        const price = getItemPrice(item);\r\n        return total + price * item.quantity;\r\n      }, 0);\r\n    }\r\n\r\n    // If there's an active deal and requirements are met, apply deal price\r\n    if (checkDealRequirements(activeDeal, cart)) {\r\n      return activeDeal.price;\r\n    }\r\n\r\n    // If deal requirements aren't met, calculate regular price\r\n    return cart.reduce((total, item) => {\r\n      const price = getItemPrice(item);\r\n      return total + price * item.quantity;\r\n    }, 0);\r\n  }, [cart, activeDeal, checkDealRequirements, getItemPrice]);\r\n\r\n  // Existing functions\r\n  const removeFromCart = useCallback(\r\n    (itemId, size = null) => {\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(itemId, size);\r\n        const updatedCart = currentCart.filter(\r\n          (item) => getItemKey(item.id, item.size) !== itemKey\r\n        );\r\n\r\n        // Check if removing this item affects any active deal\r\n        if (activeDeal && !checkDealRequirements(activeDeal, updatedCart)) {\r\n          // Remove deal markers if requirements are no longer met\r\n          return updatedCart.map((item) => ({\r\n            ...item,\r\n            inDeal: false,\r\n          }));\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  const updateQuantity = useCallback(\r\n    (itemId, newQuantity, size = null) => {\r\n      if (newQuantity < 1) {\r\n        removeFromCart(itemId, size);\r\n        return;\r\n      }\r\n\r\n      setCart((currentCart) => {\r\n        const itemKey = getItemKey(itemId, size);\r\n        const updatedCart = currentCart.map((item) =>\r\n          getItemKey(item.id, item.size) === itemKey\r\n            ? { ...item, quantity: newQuantity }\r\n            : item\r\n        );\r\n\r\n        // Check if quantity change affects any active deal\r\n        if (activeDeal) {\r\n          const isDealValid = checkDealRequirements(activeDeal, updatedCart);\r\n          return updatedCart.map((item) => ({\r\n            ...item,\r\n            inDeal: isDealValid,\r\n          }));\r\n        }\r\n\r\n        return updatedCart;\r\n      });\r\n    },\r\n    [removeFromCart, getItemKey, activeDeal, checkDealRequirements]\r\n  );\r\n\r\n  // Rest of your existing functions...\r\n\r\n  const value = {\r\n    cart,\r\n    activeDeal,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    cartTotal,\r\n    cartItemsCount,\r\n    isItemInCart,\r\n    updateItemNote,\r\n    getItemPrice,\r\n    startDeal,\r\n    cancelDeal,\r\n    checkDealRequirements,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n}\r\n\r\nexport function useCart() {\r\n  const context = useContext(CartContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useCart must be used within a CartProvider\");\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}